services:
  web:
    container_name: main_application
    build:
      context: .
      args:
        NUGET_USERNAME: ${NUGET_USERNAME}
        NUGET_PASSWORD: ${NUGET_PASSWORD}
      dockerfile: src/PetFamily.Web/Dockerfile
    #image: nesterdp/pet-family-backend:1.0
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
    depends_on:
      - "postgres"
      - "minio"
      - "rabbitmq"
    ports:
      - "8080:8080"
    networks:
      - shared_network

  postgres:
    container_name: postgres
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: pet_family
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - shared_network
  
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.16.1
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    restart: always
    networks:
      - shared_network
  
  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.16.1
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_URL="http://localhost:9200" # localhost - в сети докера, а не обычный (локальный)
    restart: always
    networks:
      - shared_network
        
  prometheus:
    container_name: prometheus
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: always
    networks:
      - shared_network
  
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel
      - grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: always
    networks:
      - shared_network
  
  minio:
    container_name: minio
    image: minio/minio
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server --console-address ":9001" /data
    networks:
      - shared_network
  
  nginx:
    container_name: nginx
    image: nginx:latest
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - web
    networks:
      - shared_network

  mongodb:
    image: mongo
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongoadmin
      MONGO_INITDB_ROOT_PASSWORD: mongopassword
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - shared_network
  
  rabbitmq:
    image: rabbitmq:management-alpine
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - shared_network
  
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    networks:
      - shared_network

networks:
  shared_network:
    name: shared_network
    driver: bridge

volumes:
  postgres-data:
  minio_data:
  mongo_data:
  rabbitmq_data:
  elasticsearch-data:
  prometheus_data:
  grafana_data:
  redis_data:
